<%  
# this partial renders a tabnav, you can call it in your views with:
#   <%= tabnav :groups % > (just the tabnav) 
# or, if you want a boxed tabnav:
#   <% tabnav :groups do % >
#     your html here
#   <% end % >
# (remove the space between % and >, we don't want to mess up your brand new tabnav :-))
#
# you can pass render_tabnav a few options:
#   :generate_css => true|false #=> generates a default inline css for the tabnav, defaults to false
#   :html => aHash #=> sets html options for the tabnav's div (es :html => {:class=> 'myCssClass', :id=>'myCssId'}) 
#     
render_tabnav :groups, 
              :generate_css => false do
    
  # this generates a tab for every controller in your app
  # you'll probably want to delete this and
  # add tabs one by one as shown below
  #controller_names.each do |name|
    #add_tab do |t|
      #t.named name.camelize
      #t.titled "Go to #{name.camelize}"
      #t.links_to :controller => name
    #end
  #end
         
  #add_tab do |t|
  #  t.named 'Home'
  #  t.titled 'Home Page'
  #  t.links_to :controller => 'welcome'
  #end 
  #  
  # you can use restful routes with:
  #
  #add_tab do |t|
  #  t.named 'Users'
  #  t.links_to hash_for_users_path
  #end
  #
  @wizard.all_available_steps[:group].each do |group_name|
    group = group_name.upcase
    add_tab do |t|
      t.named 'Group ' + group
      t.titled 'Group ' + group
      t.links_to new_prediction_path("group", group)
      t.highlights_on :aggregate_root_id => group
    end
  end
  
  unless @wizard.all_available_steps[:stage].empty?

    menu_title = 'Knockout Stages'
    stage_permalink = @aggregate_root_type.eql?(:stage) ? @aggregate_root_id : "round-of-16"
    add_tab do |t|
      t.named menu_title
      t.titled menu_title
      t.links_to new_prediction_path("stage", stage_permalink)
      t.highlights_on :aggregate_root_id => stage_permalink
    end
  end
  #  
  # # A tab can be initialized with a Hash like this:
  # 
  # add_tab :name => 'welcome', :link => {:controller=>'welcome'}
  #
  # # You can have a dynamic name or link 
  # # (this partial is evaluated in the page context, so it sees every helper or instance variable)
  #  
  # add_tab do |t|
  #   t.named "#{current_user} details"
  #   t.links_to :controller => 'users', :action => 'show', :id => current_user.id
  # end
  #
  # # You can have an image inside 
  #
  # add_tab do |t|
  #   t.named image_tag('test')
  #   t.links_to :controller => 'users', :action => 'show', :id => current_user.id
  # end
end 
%>